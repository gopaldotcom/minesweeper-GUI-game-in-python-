import tkinter as tk
from tkinter import messagebox
import random

WIDTH = 11
HEIGHT = 5
MINES = 10

class Minesweeper(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Minesweeper")
        self.geometry("400x450")
        self.configure(bg="lightgray")
        self.create_widgets()
        self.reset_game()

    def create_widgets(self):
        self.buttons = [[None for _ in range(WIDTH)] for _ in range(HEIGHT)]
        self.flagged = [[False for _ in range(WIDTH)] for _ in range(HEIGHT)]

        for y in range(HEIGHT):
            for x in range(WIDTH):
                button = tk.Button(self, width=3, height=2, font=('Arial', 10, 'bold'), command=lambda x=x, y=y: self.on_button_click(x, y))
                button.bind("<Button-3>", lambda e, x=x, y=y: self.on_right_click(x, y))
                button.grid(row=y, column=x, padx=1, pady=1)
                self.buttons[y][x] = button

        self.retry_button = tk.Button(self, text="Try Again", font=('Arial', 12), command=self.reset_game, state=tk.DISABLED, bg="lightblue")
        self.retry_button.grid(row=HEIGHT, column=0, columnspan=WIDTH, sticky="ew", pady=10)

        self.status = tk.Label(self, text="Welcome to Minesweeper!", font=('Arial', 12), bg="lightgray")
        self.status.grid(row=HEIGHT+1, column=0, columnspan=WIDTH, sticky="ew")

    def reset_game(self):
        self.board = self.create_board(WIDTH, HEIGHT, MINES)
        self.reveal_board = [[' ' for _ in range(WIDTH)] for _ in range(HEIGHT)]
        self.game_over = False
        self.flagged = [[False for _ in range(WIDTH)] for _ in range(HEIGHT)]
        self.retry_button.config(state=tk.DISABLED, bg="lightblue")
        self.status.config(text="Welcome to Minesweeper game!")
        self.update_buttons()

    def create_board(self, width, height, mines):
        board = [[' ' for _ in range(width)] for _ in range(height)]
        mines_placed = 0
        
        while mines_placed < mines:
            x, y = random.randint(0, width - 1), random.randint(0, height - 1)
            if board[y][x] != 'M':
                board[y][x] = 'M'
                mines_placed += 1
        
        return board

    def count_adjacent_mines(self, x, y):
        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        count = 0
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < WIDTH and 0 <= ny < HEIGHT:
                if self.board[ny][nx] == 'M':
                    count += 1
        return count

    def reveal_cell(self, x, y):
        if self.board[y][x] == 'M':
            return False
        
        adjacent_mines = self.count_adjacent_mines(x, y)
        self.reveal_board[y][x] = str(adjacent_mines) if adjacent_mines > 0 else ' '
        
        if adjacent_mines == 0:
            directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < WIDTH and 0 <= ny < HEIGHT:
                    if self.reveal_board[ny][nx] == ' ':
                        self.reveal_cell(nx, ny)
        
        return True

    def on_button_click(self, x, y):
        if self.game_over or self.flagged[y][x]:
            return
        
        if not self.reveal_cell(x, y):
            self.game_over = True
            self.reveal_all_cells()
            self.status.config(text="Game Over! You hit a mine.")
            messagebox.showinfo("Game Over", "Boom! You hit a mine.")
            self.retry_button.config(state=tk.NORMAL, bg="lightcoral")
        else:
            self.update_buttons()
            if self.check_win():
                self.game_over = True
                self.status.config(text="Congratulations! You won the game!")
                messagebox.showinfo("Congratulations", "You won the game!")
                self.retry_button.config(state=tk.NORMAL, bg="lightgreen")

    def on_right_click(self, x, y):
        if self.game_over or self.reveal_board[y][x] != ' ':
            return
        
      
